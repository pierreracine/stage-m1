#!/usr/bin/env python3

import sys

#This script takes the .log file returned by gaussian and extract the energies into one file for each interatomic distance.

h=27.2114		#value of 1 hartree in ev

#function that returns the list of the numbers of the lines where text is at the begining of the file.

def lines_begin(afile,text):
	L=[]
	k=1
	filin=open(afile,"r")
	for line in filin.readlines():
		if line.startswith(text):
			L.append(k)
		k+=1
	filin.close()
	if L!=[] :
		return(L)

#function that extract the text of the nth line of the file

def extract(afile,n):
	with open(afile,"r")as filin:
		text=filin.readlines()[n-1]
		return(text)

#function that returns the kth "word" of the string

def kth_term(string,k):
	kth_word=string.split()[k]
	return(kth_word)


#Function that calculates the energy of the excited state from
#ground state energy and difference of energy between them

def energy(E_GS,delta_E):
	E_ES=float(E_GS)+float(delta_E)/h
	return(E_ES)


#Function that creates a file containing all data of th computed energies
#Each line corresponds to a different interatomic distance and
#the first column corresponds to the ground state and the other to excited states

def create_data_DFT(file_s,file_t):
	with open("energies_data_DFT_s","w") as tofill1:
		tofill1.write("Energies of the ground state, and singlets excited states"+"\n"*2)
	with open("energies_data_DFT_t","w") as tofill2:
		tofill2.write("Energies of the ground state, and triplets excited states"+"\n"*2)
	with open("opt_data_DFT","w") as tofill3:
		tofill3.write("Optimized geometries of the states"+"\n"*2)
	for distance in range(100):
		E0=kth_term(extract(file_s,lines_begin(file_s," Summary of the potential surface scan:")[0]+distance+4),2)
		with open("energies_data_DFT_s","a") as tofill1:
			tofill1.write(str(E0)+"	")
		for state in range(3):
			dE=kth_term(extract(file_s,lines_begin(file_s," Convergence achieved on expansion vectors")[distance]+state-5),3)
			E=energy(E0,dE)
			with open("energies_data_DFT_s","a") as tofill1:
				tofill1.write(str(E)+"	")
		with open("energies_data_DFT_s","a") as tofill1:
			tofill1.write("\n"*2)

	for distance in range(100):
		E0=kth_term(extract(file_s,lines_begin(file_s," Summary of the potential surface scan:")[0]+distance+4),2)
		with open("energies_data_DFT_t","a") as tofill1:
			tofill1.write(str(E0)+" ")
		E0t=kth_term(extract(file_t,lines_begin(file_t," Summary of the potential surface scan:")[0]+distance+4),2)
		with open("energies_data_DFT_t","a") as tofill2:
			tofill2.write(str(E0t)+" ")
		for state in range(2):
			dE=kth_term(extract(file_t,lines_begin(file_t," Convergence achieved on expansion vectors")[distance]+state-5),3)
			E=energy(E0t,dE)
			with open("energies_data_DFT_t","a") as tofill1:
				tofill1.write(str(E)+"  ")
		with open("energies_data_DFT_t","a") as tofill1:
			tofill1.write("\n"*2)

create_data_DFT("scan_DFT_s.log","scan_DFT_t.log")

#Edition of a file containing symmetry informations of the states

for m in ["s", "t"]:
	with open("symmetry_data_DFT_"+m, "w") as tofill:
		tofill.write("Information about the symmetry of the states"+"\n"*2)
	first_line=lines_begin("scan_DFT_"+m+".log"," Excitation energies and oscillator strengths:")[0]
	with open("scan_DFT_"+m+".log","r") as toread:
		text=toread.readlines()[first_line:first_line+30]
	with open("symmetry_data_DFT_"+m, "a") as tofill:
		for k in range(30):
			tofill.write(text[k])

for m in ["s", "t"]:
	with open("sym_data_DFT_"+m, "w") as tofill:
		tofill.write("Information about the symmetry of the states"+"\n"*2)
	for k in range(3):
		symetry=kth_term(extract("symmetry_data_DFT_"+m,lines_begin("symmetry_data_DFT_"+m," Excited State   ")[k]),3)
		with open("sym_data_DFT_"+m, "a") as tofill:
			tofill.write(symetry+"\n")

